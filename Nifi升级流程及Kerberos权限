1.新建用户hxlc 
adduser hxlc 
passwd hxlc
2.赋予hxlc用户权限
修改/etc/sudoers文件，找到下面一行，在root下面添加一行“hxlc ALL=(ALL) ALL”
3.安装Java8环境
复制Java8压缩包到/home/hxlc下
tar -xvf jdk-8u331-linux-x64.tar.gz
4.配置Java_HOME
vim .bashrc
export JAVA_HOME=/home/hxlc/jdk1.8.0_331
export PATH=$JAVA_HOME/bin:$PATH
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
source .bashrc
5.挂载/HTData
yum install nfs-utils
mkdir /HTData
mount -t nfs 13k.nfs:/data /HTData/ -o vers=3,nolock
6.修改服务器的文件打开上限等
ulimit -n 4096
==========================
7.nifi升级前置
7.1把25线上nifi1.9配置及flow.xml.gz拉取到本地
7.2本地解压全新的nifi1.15.3压缩包
7.3对比配置文件的区别并修改本地nifi1.15.3的环境
7.4使用nifi-tools工具包迁移敏感属性密钥并更新flow.xml.gz
./nifi-toolkit-1.15.3/bin/encrypt-config.sh -f ~/nifi-1.9.0/conf/flow.xml.gz -g ~/nifi-1.15.3/conf/flow.xml.gz -s Nifi12345678 -n ~/nifi-1.9.0/conf/nifi.properties -o ~/nifi-1.15.3/conf/nifi.properties -x
7.5修改nifi.properties，关闭集群，修改为ip为本地127.0.0.1
7.6复制自定义nar包到lib目录下
7.6启动本地的nifi1.15.3并关闭所有的处理器组(本地没有挂载/HTData，所以在启动状态也不会进行落盘等操作，可以最小程度影响业务)
7.7保留本地测试成功的nifi1.15，新目录解压全新的nifi1.15
7.8把成功的配置文件及停止后的flow.xml.gz复制到全新的nifi1.15里
7.9修改nifi.properties中nifi.cluster.is.node=true打开集群
7.10把全新的nifi1.15打包作为配置成功的范本

===========部署步骤==========
1.修改nifi.properties
nifi.remote.input.host=10.225.1.40
nifi.web.http.host=10.225.1.40
nifi.cluster.node.address=10.225.1.40
nifi.zookeeper.connect.string=10.225.1.40:2181,10.225.1.41:2181,10.225.1.42:2181
2.修改~/nifi-1.15.3/conf/state-management.xml
<property name="Connect String">10.225.1.2:2181,10.225.1.3:2181,10.225.1.4:2181</property>


=================文件对比反馈=============
1.authorizers.xml
没有任何变动，15多了以下内容
<property name="Group Membership - Enforce Case Sensitivity">false</property>

<userGroupProvider>
    <identifier>shell-user-group-provider</identifier>
    <class>org.apache.nifi.authorization.ShellUserGroupProvider</class>
    <property name="Refresh Delay">5 mins</property>
    <property name="Exclude Groups"></property>
    <property name="Exclude Users"></property>
    <property name="Legacy Identifier Mode">true</property>
    <property name="Command Timeout">60 seconds</property>
</userGroupProvider>

<userGroupProvider>
    <identifier>azure-graph-user-group-provider</identifier>
    <class>org.apache.nifi.authorization.azure.AzureGraphUserGroupProvider</class>
    <property name="Refresh Delay">5 mins</property>
    <property name="Authority Endpoint">https://login.microsoftonline.com</property>
    <property name="Directory ID">XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXX</property>
    <property name="Application ID">XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXX</property>
    <property name="Client Secret">XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</property>
    <property name="Group Filter Prefix"></property>
    <property name="Group Filter Suffix"></property>
    <property name="Group Filter Substring"></property>
    <property name="Group Filter List Inclusion"></property>
    <property name="Page Size"></property>
    <property name="Claim for Username">upn</property>
</userGroupProvider>

<authorizer>
    <identifier>single-user-authorizer</identifier>
    <class>org.apache.nifi.authorization.single.user.SingleUserAuthorizer</class>
</authorizer>

2.bootstrap-notification-services.xml
没有任何改动

3.bootstrap.conf
记录JVM启动内存
java.arg.2=-Xms8192m
java.arg.3=-Xmx8192m
启用java.arg.13=-XX:+UseG1GC
15多了以下内容
preserve.environment=false
java.arg.17=-Dzookeeper.admin.enableServer=false
java.arg.curator.supress.excessive.logs=-Dcurator-log-only-first-connection-issue-as-error-level=true

4.login-identity-providers.xml
没有任何改动，15新增了provider账号密码
<provider>
    <identifier>single-user-provider</identifier>
    <class>org.apache.nifi.authentication.single.user.SingleUserLoginIdentityProvider</class>
    <property name="Username"/>
    <property name="Password"/>
</provider>

5.state-management.xml
记录zookeeper集群情况
 <property name="Connect String">10.225.1.2:2181,10.225.1.3:2181,10.225.1.4:2181</property>

6.nifi.properties
改动
nifi.flowfile.repository.partitions=256
nifi.flowfile.repository.checkpoint.interval=2 mins

nifi.swap.in.period=5 sec
nifi.swap.in.threads=1
nifi.swap.out.period=5 sec
nifi.swap.out.threads=4

nifi.content.claim.max.flow.files=100
nifi.content.repository.archive.max.retention.period=12 hours

nifi.provenance.repository.implementation=org.apache.nifi.provenance.WriteAheadProvenanceRepository
nifi.provenance.repository.debug.frequency=1_000_000
nifi.provenance.repository.encryption.key.provider.implementation=
nifi.provenance.repository.encryption.key.provider.location=
nifi.provenance.repository.encryption.key.id=
nifi.provenance.repository.encryption.key=

nifi.provenance.repository.max.storage.time=24 hours
nifi.provenance.repository.max.storage.size=1 GB
nifi.provenance.repository.rollover.time=30 secs

nifi.remote.input.host=10.225.1.25
nifi.remote.input.secure=false
nifi.remote.input.socket.port=9991

nifi.web.war.directory=./lib
nifi.web.http.host=10.225.1.25
nifi.web.http.port=7777
nifi.web.https.host=
nifi.web.https.port=

nifi.sensitive.props.algorithm=PBEWITHMD5AND256BITAES-CBC-OPENSSL
nifi.sensitive.props.provider=BC
nifi.sensitive.props.additional.keys=

nifi.security.keystore=
nifi.security.keystoreType=
nifi.security.truststore=
nifi.security.truststoreType=
nifi.security.user.authorizer=managed-authorizer
nifi.security.user.login.identity.provider=

nifi.cluster.is.node=true
nifi.cluster.node.address=10.225.1.25
nifi.cluster.node.protocol.port=9990
nifi.cluster.node.protocol.threads=10
nifi.cluster.flow.election.max.candidates=1
nifi.cluster.load.balance.connections.per.node=4

nifi.zookeeper.connect.string=10.225.1.2:2181,10.225.1.3:2181,10.225.1.4:2181
nifi.zookeeper.connect.timeout=3 secs
nifi.zookeeper.session.timeout=3 secs

15多了以下内容
nifi.repository.encryption.protocol.version=
nifi.repository.encryption.key.id=
nifi.repository.encryption.key.provider=
nifi.repository.encryption.key.provider.keystore.location=
nifi.repository.encryption.key.provider.keystore.password=

nifi.flowfile.repository.retain.orphaned.flowfiles=true

nifi.status.repository.questdb.persist.node.days=14
nifi.status.repository.questdb.persist.component.days=3
nifi.status.repository.questdb.persist.location=./status_repository

nifi.web.max.content.size=
nifi.web.max.requests.per.second=30000
nifi.web.max.access.token.requests.per.second=25
nifi.web.request.timeout=60 secs
nifi.web.request.ip.whitelist=
nifi.web.should.send.server.version=true

nifi.web.https.ciphersuites.include=
nifi.web.https.ciphersuites.exclude=

# SAML Properties #
nifi.security.user.saml.idp.metadata.url=
nifi.security.user.saml.sp.entity.id=
nifi.security.user.saml.identity.attribute.name=
nifi.security.user.saml.group.attribute.name=
nifi.security.user.saml.metadata.signing.enabled=false
nifi.security.user.saml.request.signing.enabled=false
nifi.security.user.saml.want.assertions.signed=true
nifi.security.user.saml.signature.algorithm=http://www.w3.org/2001/04/xmldsig-more#rsa-sha256
nifi.security.user.saml.signature.digest.algorithm=http://www.w3.org/2001/04/xmlenc#sha256
nifi.security.user.saml.message.logging.enabled=false
nifi.security.user.saml.authentication.expiration=12 hours
nifi.security.user.saml.single.logout.enabled=false
nifi.security.user.saml.http.client.truststore.strategy=JDK
nifi.security.user.saml.http.client.connect.timeout=30 secs
nifi.security.user.saml.http.client.read.timeout=30 secs

nifi.cluster.protocol.heartbeat.missable.max=8

nifi.zookeeper.client.secure=false
nifi.zookeeper.security.keystore=
nifi.zookeeper.security.keystoreType=
nifi.zookeeper.security.keystorePasswd=
nifi.zookeeper.security.truststore=
nifi.zookeeper.security.truststoreType=
nifi.zookeeper.security.truststorePasswd=
nifi.zookeeper.jute.maxbuffer=

# analytics properties #
nifi.analytics.predict.enabled=false
nifi.analytics.predict.interval=3 mins
nifi.analytics.query.interval=5 mins
nifi.analytics.connection.model.implementation=org.apache.nifi.controller.status.analytics.models.OrdinaryLeastSquares
nifi.analytics.connection.model.score.name=rSquared
nifi.analytics.connection.model.score.threshold=.90
nifi.monitor.long.running.task.schedule=
nifi.monitor.long.running.task.threshold=
nifi.diagnostics.on.shutdown.enabled=false
nifi.diagnostics.on.shutdown.verbose=false
nifi.diagnostics.on.shutdown.directory=./diagnostics
nifi.diagnostics.on.shutdown.max.filecount=10
nifi.diagnostics.on.shutdown.max.directory.size=10 MB

二、搭建带用户认证的nifi1.15集群
1. 部署用户认证所用的kerberos
参考链接 https://www.cnblogs.com/yinzhengjie/p/10765503.html
1.1 在nifi集群机器上安装一台kerberos服务端，及多台kerberos客户端
Kerberos所有相关操作最好在root用户下进行
2. 安装Kerberos服务端
 yum -y install krb5-server krb5-libs krb5-workstation
2.1 配置krb5.conf
修改kdc、admin_server、default_realm
可参考1.4上/etc/krb5.conf
2.2 配置kdc.conf
supported_enctypes = aes128-cts:normal des3-hmac-sha1:normal arcfour-hmac:normal des-hmac-sha1:normal des-cbc-md5:normal des-cbc-crc:normal
网址与krb5.conf一致，注释master_key_type这行，删除supported_enctypes中aes256-cts相关加密方式
2.3 配置kadm5.acl
此处网址与krb5.conf中一致 -> 意思是包含/admin的用户为管理员用户
2.4 创建kerberos数据库
kdb5_util create -r xxx.COM -s
2.5 添加用户
kadmin.local进入kerberos控制台
addprinc 用户名 -> 所有用户均携带xxx.COM后缀
listprincs查看所有用户
2.6 启动kerberos
systemctl start krb5kdc
systemctl start kadmin
systemctl enable krb5kdc
systemctl enable kadmin
2.7 添加服务主体并导出keytab，在nifi.properties配置文件用到
kadmin.local进入控制台
addprinc -randkey test/NIFI 添加密码随机的用户
ktadd -k /opt/test-NIFI.keytab test/NIFI 导出该用户信息到.keytab文件里
2.8 使用kinit绑定kerberos用户
kinit 用户名
2.9 klist查看用户是否绑定成功

3. 安装kerberos客户端
yum install -y krb5-lib krb5-workstation
3.1 将服务端下的/etc/krb5.conf配置文件拷贝到客户端上
3.2 同步完成后使用kinit 用户名进行登录绑定
3.3 klist查看是否绑定成功

4.nifi证书生成
4.1 使用nifi-toolkit-1.15.3 
bin/tls-toolkit.sh standalone -O -n '10.225.1.34,10.225.1.35,10.225.1.36' -C 'CN=10.225.1.34, OU=NIFI' --subjectAlternativeNames '10.225.1.34,10.225.1.35,10.225.1.36,0.0.0.0' -o 'target1'
4.2 分发证书
把target1下的文件分别拷贝到对应服务器nifi目录conf下
scp ./10.225.1.36/* hxlc@10.225.1.36:/home/hxlc/nifi-1.15.3/conf/
5. nifi配置kerberos
5.1 修改nifi.properties
nifi.security.user.login.identity.provider=kerberos-provider
nifi.security.user.authorizer=file-provider
nifi.sensitive.props.key=Nifi12345678
# kerberos # 
nifi.kerberos.krb5.file=/etc/krb5.conf
nifi.kerberos.service.principal=test/NIFI@NIFI.COM #配置的服务主体
nifi.kerberos.service.keytab.location=/opt/test-NIFI.keytab #配置服务主体的keytab
5.2 配置nifi登录信息login-identity-providers.xml 
放开kerberos-provide的配置
<provider> 
  <identifier>kerberos-provider</identifier> 
  <class>org.apache.nifi.kerberos.KerberosProvider</class> 
  <property name="Default Realm">xxx.COM/property> 
  <property name="Authentication Expiration">12 hours</property> 
</provider>
5.3 配置登录的用户信息 authorzers.xml
<authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <!--这里配置的是用于页面登陆的用户-->
        <property name="Initial Admin Identity">superadmin/admin@xxx.COM</property>
        <property name="Legacy Authorized Users File"></property>
        <property name="Node Identity 1">CN=10.225.1.34, OU=NIFI</property>
        <property name="Node Identity 2">CN=10.225.1.35, OU=NIFI</property>
        <property name="Node Identity 3">CN=10.225.1.36, OU=NIFI</property> 
</authorizer>
5.4 配置jVM
java.arg.2=-Xms16384m
java.arg.3=-Xmx16384m
参考文档 https://blog.csdn.net/qq_24309839/article/details/124272651




